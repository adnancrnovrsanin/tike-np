// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// -----------------------------------------
// MODEL ZA DODATNE (RL) PODATKE O KORISNIKU
// -----------------------------------------
model UserProfile {
  id             Int    @id @default(autoincrement())
  supabaseUserId String @unique
  email          String @default("")

  // RL polja
  age              Int?
  averageSpent     Float?
  priceSensitivity Float?

  // Ako i dalje želiš da pratiš "koji proizvod trenutno gleda"
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  // Korpa (korisnik => više stavki)
  cartItems CartItem[]

  // Lista omiljenih (korisnik => više fav proizvoda)
  favorites Favorite[]

  // Adresa
  firstName  String?
  lastName   String?
  address    String?
  city       String?
  postalCode String?
  phone      String?

  blocked Boolean @default(false)

  // Polja za praćenje ponašanja
  viewedProducts UserActivity[]
  priceRangeMin  Float? // najniža cena koju je korisnik platio
  priceRangeMax  Float? // najviša cena koju je korisnik platio
  avgOrderValue  Float? // prosečna vrednost porudžbine
  lastCalculated DateTime? // kada su poslednji put izračunati sensitivity i avgSpent

  // Težinski faktori za različite aktivnosti
  viewWeight     Float @default(0.1)
  cartWeight     Float @default(0.3)
  favoriteWeight Float @default(0.2)
  purchaseWeight Float @default(0.4)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

// Model za praćenje aktivnosti korisnika
model UserActivity {
  id            Int         @id @default(autoincrement())
  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])
  productId     Int
  product       Product     @relation(fields: [productId], references: [id])
  activityType  String // VIEW, CART_ADD, CART_REMOVE, FAVORITE_ADD, FAVORITE_REMOVE, PURCHASE
  metadata      Json? // dodatne informacije o aktivnosti
  createdAt     DateTime    @default(now())

  @@index([userProfileId])
  @@index([productId])
}

// -----------------------------------------
// KATEGORIJE
// -----------------------------------------
model Category {
  id          Int     @id @default(autoincrement())
  category_id Int
  name        String?

  products Product[]
}

// -----------------------------------------
// PROIZVODI
// -----------------------------------------
model Product {
  id          Int     @id @default(autoincrement())
  product_id  Int
  name        String?
  brand       String?
  description String?
  basePrice   Float
  margin      Float
  imageUrl    String?
  isActive    Boolean @default(true)
  totalStock  Int     @default(0)

  // Dodato za recommendation engine
  count  Int   @default(0) // Broj preporuka/interakcija
  reward Float @default(1.0) // Reward vrednost za recommendation engine

  // Postojeća polja
  gender Gender?
  color  String?

  categoryId Int?
  category   Category? @relation(fields: [categoryId], references: [id])

  variants    ProductVariant[]
  UserProfile UserProfile[]
  Favorite    Favorite[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  UserActivity UserActivity[]

  @@index([product_id])
  @@index([categoryId])
}

// Model za popuste
model Discount {
  id         Int          @id @default(autoincrement())
  code       String       @unique
  type       DiscountType
  value      Float // procenat ili fiksna vrednost u zavisnosti od tipa
  minAmount  Float? // minimalni iznos za primenu popusta
  maxAmount  Float? // maksimalni iznos popusta
  isActive   Boolean      @default(true)
  startDate  DateTime
  endDate    DateTime?
  usageLimit Int? // koliko puta se može iskoristiti
  usageCount Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tipovi popusta
enum DiscountType {
  PERCENTAGE // npr. 20% off
  FIXED // npr. $10 off
}

// Možemo dodati i enume za bolje tipiziranje
enum Gender {
  men
  women
  unisex
}

enum ClothingSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum ShoeSize {
  EU_35
  EU_36
  EU_37
  EU_38
  EU_39
  EU_40
  EU_41
  EU_42
  EU_43
  EU_44
  EU_45
}

model ProductVariant {
  id           Int           @id @default(autoincrement())
  clothingSize ClothingSize? // za odeću
  shoeSize     ShoeSize? // za obuću
  quantity     Int

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  cartItems CartItem[]
  OrderItem OrderItem[]
}

// -----------------------------------------
// FAVORITES: UserProfile ↔ Product
// -----------------------------------------
model Favorite {
  id Int @id @default(autoincrement())

  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

// -----------------------------------------
// CART (BASKET): UserProfile ↔ ProductVariant
// -----------------------------------------
model CartItem {
  id Int @id @default(autoincrement())

  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  // Nova polja
  price    Float // Personalizovana cena u trenutku dodavanja u korpu
  quantity Int   @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userProfileId])
  @@index([productVariantId])
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfileId Int
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

  totalAmount     Float
  status          String // PENDING, COMPLETED, CANCELLED
  shippingAddress Json
  paymentInfo     Json
  items           OrderItem[]

  @@index([userProfileId])
}

model OrderItem {
  id      Int   @id @default(autoincrement())
  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productVariantId Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])

  quantity Int
  price    Float

  @@index([orderId])
  @@index([productVariantId])
}
